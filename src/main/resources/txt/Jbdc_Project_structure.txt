//Структура
Сборник про jbdc
https://javatalks.ru/topics/7147

Интерфейсы
http://www.realcoding.net/articles/glava-3-pakety-i-interfeisy.html
Интерфейс (interface), в отличие от класса, содержит только константы  и заголовки методов, без их реализации.
Интерфейсы размещаются в тех же пакетах и подпакетах, что и классы, и компилируются тоже в class-файлы.
Описание интерфейса начинается со слова interface, перед которым может стоять модификатор public, означающий, как и для класса, что интерфейс доступен всюду.
Если же модификатора public нет, интерфейс будет виден только в своем пакете.
После слова interface записывается имя интерфейса, .потом может ;стоять слово extends и список интерфейсов-предков через запятую.
Таким образом, интерфейсы могут порождаться от интерфейсов, образуя свою, независимую от классов, иерархию, причем в ней допускается множественное наследование интерфейсов.
!!!В этой иерархии нет корня, общего предка.!
Затем, в фигурных скобках, записываются в любом порядке константы и заголовки методов.
Можно сказать, что в интерфейсе все методы абстрактные, но слово abstract писать не надо.
Константы всегда статические, но слова static и final указывать не нужно.
Все константы и методы в интерфейсах всегда открыты, не надо даже .указывать модификатор public.

Таким образом, интерфейс — это только набросок, эскиз. В нем указано, что делать, но не указано, как это делать.
Использовать нужно не интерфейс, а его реализацию (implementation).
Реализация интерфейса — это класс, в котором расписываются методы одного или нескольких интерфейсов.
В заголовке класса после его имени или после имени его суперкласса, если он есть, записывается слово implements и, через запятую,
перечисляются имена интерфейсов.


В поме указываем вендера бд
<dependencies>
    <!-- https://mvnrepository.com/artifact/org.postgresql/postgresql -->
    <dependency>
        <groupId>org.postgresql</groupId>
        <artifactId>postgresql</artifactId>
        <version>42.2.11</version>
    </dependency>
</dependencies>

package org.levelup.job.list.Jdbc;
public class JbdcUtils - коннекшн с базой
public class - JobListService методы работы с базой  public Position createPosition

package org.levelup.job.list.Domain;
public class Position //описание 1 строки таблицы Positions

package org.levelup.job.list.job;
public class JobListApplication //всё, что делаем с базой